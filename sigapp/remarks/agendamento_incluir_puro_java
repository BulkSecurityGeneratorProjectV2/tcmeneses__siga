	// o código abaixo NÃO será usado, mas, deverá ser preservado porque está funcionando bem.
	public static void agendamento_incluir_puro(String frm_cod_local,
			String frm_data_ag, Boolean verde) {
		// pega usuario do sistema
		String matriculaSessao = cadastrante().getMatricula().toString();
		UsuarioForum objUsuario = UsuarioForum.find(
				"matricula_usu =" + matriculaSessao).first();
		if (objUsuario != null) {
			List<String> listHorasLivres = new ArrayList<String>();
			List<Locais> listSalas = new ArrayList();
			List listDatasLotadas = new ArrayList();
			List listDatasDoMes = new ArrayList();
			if (frm_data_ag == null && frm_cod_local == null) { // Se nulo
				// Pega o usuário do sistema, e, busca os locais(salas) daquele
				// forum onde ele está.
				listSalas = (List) Locais.find("cod_forum='"+objUsuario.forumFk.cod_forum+"'").fetch(); // isso não dá erro no caso de retorno vazio.
			} else {
				if (frm_cod_local != null) {
					SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
					Date parametro = new Date();
					Date dt = new Date();
					String dtt = df.format(dt);
					Agendamentos objAgendamento = new Agendamentos(parametro,
							null, null, null, null, null, null, null, null);
					try {
						List<Agendamentos> results = Agendamentos
								.find("data_ag >= to_date('" + dtt
										+ "','dd/MM/yyyy') and cod_local='"
										+ frm_cod_local + "'  order by data_ag")
								.fetch();
						// verifica se veio algum agendamento
						if (results.size() != 0) {
							// preenche as datas do local no 'MÊS' na agenda
							// CORRENTE
							for (Iterator it = results.iterator(); it.hasNext();) {
								objAgendamento = (Agendamentos) it.next();
								listDatasDoMes.add(objAgendamento.data_ag
										.toString());
							}
							String dia_ag_ant = "";
							String dia_ag_prox;
							int i = 0;
							// conta os agendamentos de cada dia, do local que
							// veio do form
							for (Iterator it = listDatasDoMes.iterator(); it
									.hasNext();) {
								dia_ag_prox = (String) it.next(); // pegou o próximo
								if (i == 0) {
									dia_ag_ant = dia_ag_prox;
								}
								if (dia_ag_prox.equals(dia_ag_ant)) {
									i++; // contou a repetição
								} else {
									i = 1;
									dia_ag_ant = dia_ag_prox;
								}
								// se a data estiver lotada, marca
								if (i >= 33) {
									listDatasLotadas.add(dia_ag_ant);
								} // guardou a data lotada
							}
							// veio algum agendamento
							System.out.println(results.size()
									+ " agendamentos...");
						} else {
							// não veio nenhum agendamento
							System.out.println("não veio agendamento nenhum");
							System.out.println("Data ag:" + frm_data_ag);
						}
						// frm_cod_local não veio nulo
						listSalas.clear();
						listSalas.add((Locais) Locais.find(
								"cod_local = '" + frm_cod_local + "'").first());
						// escolheu uma sala, e, submeteu o form a si
						if (verde) {
							// local com dias filtrados, passa aos horários do
							// dia selecionado
							if (frm_data_ag != null && !frm_data_ag.isEmpty()) {
								listHorasLivres.add("10:00");
								listHorasLivres.add("10:30");
								listHorasLivres.add("11:00");
								listHorasLivres.add("11:30");
								listHorasLivres.add("12:00");
								listHorasLivres.add("12:30");
								listHorasLivres.add("13:00");
								listHorasLivres.add("13:30");
								listHorasLivres.add("14:00");
								listHorasLivres.add("14:30");
								listHorasLivres.add("15:00");
								listHorasLivres.add("15:30");
								listHorasLivres.add("16:00");
								listHorasLivres.add("16:30");
								listHorasLivres.add("17:00");
								listHorasLivres.add("17:30");
								listHorasLivres.add("18:00");
								listHorasLivres.add("18:30");
								df.applyPattern("dd-MM-yyyy");
								try {
									parametro = df.parse(frm_data_ag);
								} catch (Exception e) {
									e.printStackTrace();
								}
								objAgendamento = null;
								/*
								Locais objLocal = Locais.find(
										"cod_local = '" + frm_cod_local + "'")
										.first();
								listSalas.add(objLocal);
								*/
								try {
									dtt = frm_data_ag;
									results.clear();
									results = Agendamentos
											.find("data_ag = to_date('"
													+ dtt
													+ "','dd-MM-yyyy') and cod_local='"
													+ frm_cod_local + "'")
											.fetch();
									// zera os horários usados na data
									// selecionada no determinado local
									String hrr = "";
									for (Iterator it = results.iterator(); it
											.hasNext();) {
										objAgendamento = (Agendamentos) it
												.next();
										hrr = objAgendamento.hora_ag;
										hrr = hrr.substring(0, 2) + ":"
												+ hrr.substring(2, 4);
										listHorasLivres.set(
												listHorasLivres.indexOf(hrr),
												"");
									}
								} catch (Exception e) {
									e.printStackTrace();
								}
							}
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			try {
				render(listSalas, listHorasLivres, listDatasLotadas,
						frm_data_ag);
			} catch (Exception e) {
				e.printStackTrace();

			}
		} else {
			Excecoes("Usuário sem permissão");
		}
	}